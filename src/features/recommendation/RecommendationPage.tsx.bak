import React, { useState, useEffect } from 'react';
import { Box,       try {
      const response: RecommendationResponse = await getRecommendations({
        recommendation_type: recommendationType,
        limit: 10,
        genre: selectedGenre
      });
      
      console.log('Received recommendations:', response.recommendations);
      // Ensure we're setting a valid array, even if empty
      const recommendationsArray = Array.isArray(response.recommendations) 
        ? response.recommendations 
        : [];
        
      setRecommendations(recommendationsArray);
      setIsFallback(response.is_fallback);
      setFallbackReason(response.fallback_reason || null);
      setLastRefreshed(getLastRefreshTime(recommendationType, selectedGenre));ab, Tabs, Typography, Paper, CircularProgress, Alert } from '@mui/material';
import RecommendationList from './RecommendationList';
import RecommendationFilters from './RecommendationFilters';
import { getRecommendations, canRefreshRecommendations, getLastRefreshTime } from '../../services/recommendationService';
import { BookRecommendation, RecommendationResponse, RecommendationType } from '../../types/recommendationTypes';

// TabPanel component for the tabbed interface
interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`recommendation-tabpanel-${index}`}
      aria-labelledby={`recommendation-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

function a11yProps(index: number) {
  return {
    id: `recommendation-tab-${index}`,
    'aria-controls': `recommendation-tabpanel-${index}`,
  };
}

const RecommendationPage: React.FC = () => {
  // State management
  const [tabValue, setTabValue] = useState(0);
  const [recommendations, setRecommendations] = useState<BookRecommendation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isFallback, setIsFallback] = useState(false);
  const [fallbackReason, setFallbackReason] = useState<string | null>(null);
  const [selectedGenre, setSelectedGenre] = useState<string | undefined>(undefined);
  const [recommendationType, setRecommendationType] = useState<RecommendationType>('top_rated');
  const [lastRefreshed, setLastRefreshed] = useState<Date | null>(null);

  // Tab change handler
  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
    const types: RecommendationType[] = ['top_rated', 'similar', 'ai'];
    setRecommendationType(types[newValue]);
  };

  // Genre filter change handler
  const handleGenreChange = (genre: string | undefined) => {
    setSelectedGenre(genre);
  };

  // Load recommendations based on current type and filters
  const loadRecommendations = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response: RecommendationResponse = await getRecommendations({
        recommendation_type: recommendationType,
        limit: 10,
        genre: selectedGenre
      });
      
      console.log('Received recommendations:', response.recommendations);
      setRecommendations(response.recommendations);
      setIsFallback(response.is_fallback);
      setFallbackReason(response.fallback_reason || null);
      setLastRefreshed(getLastRefreshTime(recommendationType, selectedGenre));
    } catch (err) {
      console.error('Error fetching recommendations:', err);
      setError('Failed to fetch recommendations. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  // Refresh handler
  const handleRefresh = () => {
    if (canRefreshRecommendations(recommendationType, selectedGenre)) {
      loadRecommendations();
    }
  };

  // Effect to load recommendations when type or genre changes
  useEffect(() => {
    loadRecommendations();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [recommendationType, selectedGenre]);

  // Effect to check for authentication
  useEffect(() => {
    // Authentication is handled at the App level
  }, []);

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Book Recommendations
      </Typography>
      
      <Paper sx={{ width: '100%', mb: 2 }}>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={handleTabChange} aria-label="recommendation tabs">
            <Tab label="Top Rated" {...a11yProps(0)} />
            <Tab label="Similar Books" {...a11yProps(1)} />
            <Tab label="AI Suggestions" {...a11yProps(2)} />
          </Tabs>
        </Box>

        {/* Filters */}
        <Box sx={{ p: 2 }}>
          <RecommendationFilters 
            onGenreChange={handleGenreChange} 
            selectedGenre={selectedGenre} 
            onRefresh={handleRefresh}
            recommendationType={recommendationType}
            lastRefreshed={lastRefreshed}
          />
        </Box>

        {/* Tab Panels */}
        {['top_rated', 'similar', 'ai'].map((type, index) => (
          <TabPanel key={type} value={tabValue} index={index}>
            {error ? (
              <Alert severity="error">{error}</Alert>
            ) : loading ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
                <CircularProgress />
              </Box>
            ) : (
              <>
                {isFallback && (
                  <Alert severity="info" sx={{ mb: 2 }}>
                    {fallbackReason || 'Showing alternative recommendations.'}
                  </Alert>
                )}
                {/* Debug info for recommendations */}
                <Box sx={{ mb: 2 }}>
                  <Typography variant="caption" color="text.secondary">
                    {recommendations && recommendations.length > 0 
                      ? `Showing ${recommendations.length} recommendations`
                      : 'No recommendations to display'}
                  </Typography>
                </Box>
                <RecommendationList 
                  recommendations={recommendations || []}
                  loading={loading}
                />
              </>
            )}
          </TabPanel>
        ))}
      </Paper>
    </Container>
  );
};

export default RecommendationPage;

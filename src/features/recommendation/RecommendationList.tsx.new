import React from 'react';
import { Card, CardContent, CardHeader, Typography, Box, Chip, Rating, Skeleton } from '@mui/material';
import { BookRecommendation } from '../../types/recommendationTypes';

interface RecommendationListProps {
  recommendations: BookRecommendation[];
  loading: boolean;
}

// Skeleton loader for recommendations
const RecommendationSkeleton = () => {
  return (
    <Box sx={{ width: { xs: '100%', sm: '50%', md: '33.33%' }, padding: 1 }}>
      <Card sx={{ height: '100%', boxShadow: 3, borderRadius: 3 }}>
        <CardContent>
          <Skeleton variant="text" width="80%" height={32} />
          <Skeleton variant="text" width="60%" height={24} />
          <Box sx={{ mt: 1, mb: 1 }}>
            <Skeleton variant="text" width="40%" height={24} />
          </Box>
          <Box sx={{ display: 'flex', gap: 0.5, flexWrap: 'wrap', mb: 1 }}>
            <Skeleton variant="rounded" width={60} height={24} />
            <Skeleton variant="rounded" width={60} height={24} />
          </Box>
          <Skeleton variant="text" width="100%" height={20} />
          <Skeleton variant="text" width="90%" height={20} />
        </CardContent>
      </Card>
    </Box>
  );
};

const RecommendationList: React.FC<RecommendationListProps> = ({ recommendations, loading }) => {
  // Show skeleton loaders when loading
  if (loading) {
    return (
      <Box sx={{ display: 'flex', flexWrap: 'wrap', margin: -1 }}>
        {[...Array(6)].map((_, index) => (
          <RecommendationSkeleton key={index} />
        ))}
      </Box>
    );
  }

  // Simple empty check that will work reliably
  const isEmpty = !recommendations || !Array.isArray(recommendations) || recommendations.length === 0;

  // Show empty message when no recommendations are available
  if (isEmpty) {
    return (
      <Box sx={{ p: 4, textAlign: 'center' }}>
        <Typography variant="h6" color="text.secondary">
          No recommendations available.
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Try a different category or check back later.
        </Typography>
      </Box>
    );
  }

  // Render recommendation cards
  return (
    <Box sx={{ display: 'flex', flexWrap: 'wrap', margin: -1 }}>
      {recommendations.map((book) => (
        <Box 
          sx={{ width: { xs: '100%', sm: '50%', md: '33.33%' }, padding: 1 }} 
          key={book?.book_id || `book-${Math.random()}`}
        >
          <Card sx={{ 
            height: '100%', 
            boxShadow: 3, 
            borderRadius: 3, 
            display: 'flex', 
            flexDirection: 'column'
          }}>
            <CardHeader
              title={book?.title || 'Untitled Book'}
              subheader={`by ${book?.author || 'Unknown Author'}`}
              titleTypographyProps={{ variant: 'h6' }}
              subheaderTypographyProps={{ variant: 'subtitle1' }}
            />
            <CardContent sx={{ pt: 0, flexGrow: 1 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                <Rating value={book?.average_rating || 0} precision={0.5} readOnly size="small" />
                <Typography variant="body2" color="text.secondary" sx={{ ml: 1 }}>
                  ({(book?.average_rating || 0).toFixed(1)}) {book?.rating_count || 0} ratings
                </Typography>
              </Box>
              
              <Box sx={{ mb: 1.5 }}>
                {(book?.genres || []).slice(0, 3).map((genre, index) => (
                  <Chip key={`${genre}-${index}`} label={genre} size="small" sx={{ mr: 0.5, mb: 0.5 }} />
                ))}
                {(book?.genres?.length || 0) > 3 && (
                  <Chip label={`+${book.genres.length - 3}`} size="small" sx={{ mr: 0.5, mb: 0.5 }} />
                )}
              </Box>
              
              <Typography variant="body2" sx={{ mb: 1 }}>
                <strong>Relevance:</strong> {((book?.relevance_score || 0) * 100).toFixed(0)}%
              </Typography>
              
              {book?.publication_year && (
                <Typography variant="body2" sx={{ mb: 1 }}>
                  <strong>Published:</strong> {book.publication_year}
                </Typography>
              )}
              
              <Typography variant="body2" color="text.secondary">
                {book?.recommendation_reason || 'No description available'}
              </Typography>
            </CardContent>
          </Card>
        </Box>
      ))}
    </Box>
  );
};

export default RecommendationList;
